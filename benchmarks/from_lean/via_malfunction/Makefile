LBOX_SWITCH=lambda-box-extraction
MALFUNCTION_NO_FLAMBDA_SWITCH=malfunction
MALFUNCTION_FLAMBDA_SWITCH=malfunction+flambda

# 0 to make without flambda, 1 to use flambda; default is 1.
FLAMBDA?=1
ifeq ($(FLAMBDA),1)
MALFUNCTION_SWITCH=$(MALFUNCTION_FLAMBDA_SWITCH)
else ifeq ($(FLAMBDA),0)
MALFUNCTION_SWITCH=$(MALFUNCTION_NO_FLAMBDA_SWITCH)
else
$(error Variable FLAMBDA must be either 0 or 1, is $(FLAMBDA))
endif

# 0 to use "regular" axioms, 1 to use inlined axioms; default is 1.
INLINE_AXIOMS?=1
ifeq ($(INLINE_AXIOMS),1)
DECIDABLEML=decidable-inline.ml
NATML=nat-inline.ml
else ifeq ($(INLINE_AXIOMS),0)
DECIDABLEML=decidable.ml
NATML=nat.ml
else
$(error Variable INLINE_AXIOMS must be either 0 or 1, is $(INLINE_AXIOMS))
endif

LBOX=opam exec --switch=$(LBOX_SWITCH) -- lbox
OCAMLOPT=opam exec --switch=$(MALFUNCTION_SWITCH) -- ocamlfind ocamlopt -package zarith
MALFUNCTION=opam exec --switch=$(MALFUNCTION_SWITCH) -- malfunction

# Space-separated.
malfunction_build_info:=OCAML_ARGS=$(OCAML_ARGS)\
FLAMBDA=$(FLAMBDA)\
MALFUNCTION_ARGS=$(MALFUNCTION_ARGS)\
OCAMLPARAM=$(OCAMLPARAM)\
MALFUNCTION_SWITCH=$(MALFUNCTION_SWITCH)\
INLINE_AXIOMS=$(INLINE_AXIOMS)\
DECIDABLEML=$(DECIDABLEML)\
NATML=$(NATML)

malfunction_build_id:= $(shell echo "$(malfunction_build_info)" | sha256sum | head -c 8)

build:=build/$(malfunction_build_id)
bin:=bin/$(malfunction_build_id)

FORCE:

bin/%: $(bin)/% $(if $(TARGET),FORCE)
ifdef TARGET
	ln -srf $< $(TARGET)
else
	ln -srf $< $@
endif

$(bin)/%: $(build)/%.cmx\
          $(build)/decidable.cmx\
          $(build)/nat.cmx\
          $(build)/axioms.cmx\
          $(build)/%_main.ml | $(bin)
	$(OCAMLOPT) -I $(build) -linkpkg $(OCAML_ARGS) $(build)/decidable.cmx $(build)/nat.cmx $(build)/axioms.cmx $(build)/$*.cmx $(build)/$*_main.ml -o $@

define register_test
$(let testname harness rest,$(subst :, ,$(1)),\

# The shell magic capitalizes the first letter of the test name to make a module name.
$(build)/$(testname)_main.ml: $(harness).ml.template | $(build)
	sed "s/{{testmodule}}/$(shell echo $(testname) | sed 's/^./\U&/')/g" $(harness).ml.template > $$@

)
endef

$(foreach testspec,$(shell cat ../TESTS),$(eval $(call register_test,$(testspec))))

default:
	$(error No target specified)

$(build):
	mkdir -p $@
	printf "%s\\n" $(malfunction_build_info) > $(build)/cfg
$(bin):
	mkdir -p $@

$(build)/axioms.mli: axioms.mli | $(build)
	cp $< $@

$(build)/axioms.ml: axioms.ml | $(build)
	cp $< $@

$(build)/decidable.mli: decidable.mli | $(build)
	cp $< $@

$(build)/decidable.ml: $(DECIDABLEML) | $(build)
	cp $< $@

# decidable.cmi handled by generic rule (no prerequisites)

$(build)/decidable.cmx: $(build)/decidable.ml $(build)/decidable.cmi
	$(OCAMLOPT) -I $(build) -c $<

$(build)/nat.mli: nat.mli | $(build)
	cp $< $@

$(build)/nat.ml: $(NATML) | $(build)
	cp $< $@

$(build)/nat.cmi: $(build)/nat.mli $(build)/decidable.cmi
	$(OCAMLOPT) -I $(build) -c $<

$(build)/nat.cmx: $(build)/nat.ml $(build)/nat.mli $(build)/decidable.cmx
	$(OCAMLOPT) -I $(build) -c $<

$(build)/axioms.cmi: $(build)/axioms.mli $(build)/decidable.cmi $(build)/nat.cmi
	$(OCAMLOPT) -I $(build) -c $<

$(build)/axioms.cmx: $(build)/axioms.ml $(build)/axioms.cmi $(build)/nat.cmx
	$(OCAMLOPT) -I $(build) -c $<

$(build)/%.lean: test.lean.template | $(build)
	sed "s/{{testfunction}}/$*/g; s/{{extractiondir}}/$(subst /,\/,$(build))/g" $< > $@

# The .ast file containing Î»box S-expressions and the .mli file containing the signature
# of the exposed main function are generated by elaborating the appropriate .lean file.
# Running `lake build` would not work as lake would do nothing on subsequent runs if the .lean has not changed.
$(build)/%.ast $(build)/%.mli: $(build)/%.lean ../FromLeanCommon.lean ../FromLeanCommon/
	lake lean $<

$(build)/%.mlf: $(build)/%.ast
	$(LBOX) ocaml $< > /dev/null

# Malfunction will silently generate an empty .cmi file if not given an .mli interface, but that won't work for linking later.
$(build)/%.cmi: $(build)/%.mli
	$(OCAMLOPT) -c $<

# Depend on axioms.cmx in order to allow cross-module optimizations (esp. inlining)
$(build)/%.cmx: $(build)/%.mlf $(build)/%.cmi $(build)/axioms.cmx
	cd $(build) && $(MALFUNCTION) cmx $(MALFUNCTION_ARGS) $*.mlf

clean:
	rm -rf build bin

.PHONY: Makefile clean

# Don't consider anything as an intermediate file.
.NOTINTERMEDIATE:

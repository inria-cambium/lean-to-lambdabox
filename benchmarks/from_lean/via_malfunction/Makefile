default:
	@echo "No target specified, exiting."

build:
	mkdir -p $@
bin:
	mkdir -p $@

build/axioms.ml: axioms.ml | build
	cp axioms.ml $@

build/axioms.mli: axioms.mli | build
	cp axioms.mli $@

build/axioms.cmi: build/axioms.mli
	ocamlfind ocamlopt -I build -package zarith -c build/axioms.mli

build/axioms.cmx: build/axioms.ml build/axioms.cmi
	ocamlfind ocamlopt -I build -package zarith -c build/axioms.ml

build/%.lean: test.lean.template | build
	sed "s/{{testfunction}}/$*/g; s/{{extractiondir}}/build/g" test.lean.template > $@

# The .ast file containing Î»box S-expressions is generated by elaborating the appropriate .lean file.
# Running `lake build` would not work as lake would do nothing on subsequent runs if the .lean has not changed.
build/%.ast: build/%.lean ../FromLeanCommon.lean
	lake lean $<

build/%.mlf: build/%.ast
	lbox ocaml $< > /dev/null

# Copying this over so its place in the Git repo is outside of the extraction directory.
build/%.mli: %.mli | build
	cp $< $@

# Malfunction will generate an empty .cmi file if not given one, but that won't work for linking later.
build/%.cmi: build/%.mli
	ocamlfind ocamlopt -package zarith -c $<

build/%.cmx: build/%.mlf build/%.cmi build/axioms.cmi
	cd build && malfunction cmx $*.mlf

# The shell magic capitalizes the first letter of the test name to make a module name.
bin/%_runonce: build/%.cmx build/%.cmi build/axioms.cmx runonce.ml.template | bin
	sed "s/{{testfunction}}/$*/g; s/{{testmodule}}/$(shell echo $* | sed 's/^./\U&/')/g" runonce.ml.template > build/$*_runonce.ml
	ocamlfind ocamlopt -I build -package zarith -linkpkg build/axioms.cmx build/$*.cmx build/$*_runonce.ml -o $@

bin/%_repeat: build/%.cmx build/%.cmi build/axioms.cmx repeat.ml.template | bin
	sed "s/{{testfunction}}/$*/g; s/{{testmodule}}/$(shell echo $* | sed 's/^./\U&/')/g" repeat.ml.template > build/$*_repeat.ml
	ocamlfind ocamlopt -I build -package zarith -linkpkg build/axioms.cmx build/$*.cmx build/$*_repeat.ml -o $@

bin/%_natio: build/%.cmx build/%.cmi build/axioms.cmx natio.ml.template | bin
	sed "s/{{testfunction}}/$*/g; s/{{testmodule}}/$(shell echo $* | sed 's/^./\U&/')/g" natio.ml.template > build/$*_natio.ml
	ocamlfind ocamlopt -I build -package zarith -linkpkg build/axioms.cmx build/$*.cmx build/$*_natio.ml -o $@
clean:
	rm -rf build bin

.PHONY: all clean

# Don't delete intermediate files
.SECONDARY:
